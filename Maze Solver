#include <iostream>
#include <vector>

using namespace std;

const int ROWS = 5;
const int COLS = 5;

// Function to print the maze
void printMaze(const vector<vector<int>>& maze) {
    for (const auto& row : maze) {
        for (int cell : row) {
            cout << (cell ? '#' : ' ') << ' ';
        }
        cout << endl;
    }
}

// Check if a cell is within maze bounds and is not a wall
bool isValid(int x, int y, const vector<vector<int>>& maze, const vector<vector<bool>>& visited) {
    return (x >= 0 && x < ROWS && y >= 0 && y < COLS && maze[x][y] == 0 && !visited[x][y]);
}

// Depth-First Search function to solve the maze
bool solveMaze(vector<vector<int>>& maze, int x, int y, vector<vector<bool>>& visited) {
    if (x == ROWS - 1 && y == COLS - 1) {
        maze[x][y] = 2; // Mark the path
        return true;
    }

    if (isValid(x, y, maze, visited)) {
        visited[x][y] = true;
        maze[x][y] = 2; // Mark the path

        // Move right
        if (solveMaze(maze, x, y + 1, visited)) return true;

        // Move down
        if (solveMaze(maze, x + 1, y, visited)) return true;

        // Move left
        if (solveMaze(maze, x, y - 1, visited)) return true;

        // Move up
        if (solveMaze(maze, x - 1, y, visited)) return true;

        maze[x][y] = 0; // Unmark the path (backtrack)
    }

    return false;
}

int main() {
    vector<vector<int>> maze = {
        {0, 1, 0, 0, 0},
        {0, 1, 0, 1, 0},
        0, 0, 0, 1, 0},
        {0, 1, 0, 0, 0},
        {0, 0, 0, 1, 0}
    };

    vector<vector<bool>> visited(ROWS, vector<bool>(COLS, false));

    if (solveMaze(maze, 0, 0, visited)) {
        cout << "Path found:\n";
    } else {
        cout << "No path found.\n";
    }

    printMaze(maze);

    return 0;
}
