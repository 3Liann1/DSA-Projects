#include <iostream>
#include <vector>
#include <limits>

using namespace std;

const int PLAYER_X = 1;
const int PLAYER_O = -1;
const int EMPTY = 0;

// Function to print the Tic-Tac-Toe board
void printBoard(const vector<int>& board) {
    for (int i = 0; i < 9; ++i) {
        if (board[i] == PLAYER_X) cout << " X ";
        else if (board[i] == PLAYER_O) cout << " O ";
        else cout << " . ";

        if (i % 3 < 2) cout << "|";
        else cout << endl;

        if (i % 3 == 2 && i < 6) cout << "---|---|---" << endl;
    }
    cout << endl;
}

// Check if there is a win on the board
int checkWin(const vector<int>& board) {
    const int winConditions[8][3] = {
        {0, 1, 2}, {3, 4, 5}, {6, 7, 8}, // Rows
        {0, 3, 6}, {1, 4, 7}, {2, 5, 8}, // Columns
        {0, 4, 8}, {2, 4, 6}              // Diagonals
    };

    for (const auto& condition : winConditions) {
        if (board[condition[0]] != EMPTY &&
            board[condition[0]] == board[condition[1]] &&
            board[condition[1]] == board[condition[2]]) {
            return board[condition[0]];
        }
    }

    return EMPTY;
}

// Check if the board is full
bool isBoardFull(const vector<int>& board) {
    for (int i = 0; i < 9; ++i) {
        if (board[i] == EMPTY) return false;
    }
    return true;
}

// Minimax algorithm to find the best move
int minimax(vector<int>& board, int depth, bool isMaximizing) {
    int winner = checkWin(board);
    if (winner == PLAYER_X) return 10 - depth;
    if (winner == PLAYER_O) return depth - 10;
    if (isBoardFull(board)) return 0;

    if (isMaximizing) {
        int bestScore = numeric_limits<int>::min();
        for (int i = 0; i < 9; ++i) {
            if (board[i] == EMPTY) {
                board[i] = PLAYER_X;
                int score = minimax(board, depth + 1, false);
                board[i] = EMPTY;
                bestScore = max(score, bestScore);
            }
        }
        return bestScore;
    } else {
        int bestScore = numeric_limits<int>::max();
        for (int i = 0; i < 9; ++i) {
            if (board[i] == EMPTY) {
                board[i] = PLAYER_O;
                int score = minimax(board, depth + 1, true);
                board[i] = EMPTY;
                bestScore = min(score, bestScore);
            }
        }
        return bestScore;
    }
}

// Find the best move for the AI
int findBestMove(vector<int>& board) {
    int bestMove = -1;
    int bestScore = numeric_limits<int>::min();

    for (int i = 0; i < 9; ++i) {
        if (board[i] == EMPTY) {
            board[i] = PLAYER_X;
            int moveScore = minimax(board, 0, false);
            board[i] = EMPTY;

            if (moveScore > bestScore) {
                bestScore = moveScore;
                bestMove = i;
            }
        }
    }
    return bestMove;
}

// Main function to run the Tic-Tac-Toe game
int main() {
    vector<int> board(9, EMPTY);
    bool isXTurn = true;
    int move;

    while (true) {
        printBoard(board);

        if (isXTurn) {
            cout << "Player X's turn (Enter position 1-9): ";
            cin >> move;
            --move;  // Convert to 0-based index
            if (move < 0 || move >= 9 || board[move] != EMPTY) {
                cout << "Invalid move. Try again." << endl;
                continue;
            }
            board[move] = PLAYER_X;
        } else {
            move = findBestMove(board);
            board[move] = PLAYER_O;
            cout << "Player O (AI) chose position " << move + 1 << endl;
        }

        int winner = checkWin(board);
        if (winner != EMPTY) {
            printBoard(board);
            if (winner == PLAYER_X) cout << "Player X wins!" << endl;
            else cout << "Player O wins!" << endl;
            break;
        } else if (isBoardFull(board)) {
            printBoard(board);
            cout << "It's a draw!" << endl;
            break;
        }

        isXTurn = !isXTurn;  // Switch turns
    }

    return 0;
}
